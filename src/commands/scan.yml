description: Scan the application dependencies for known vulnerabilities with Snyk. This command calls the others, and should be used as the command for scanning.
parameters:
  command:
    description: >
      The Snyk command to call, i.e. "test" or "iac test"
    type: string
    default: "test"
  token-variable:
    description: >
      Name of env var containing your Snyk API token. Pass this as a raw string such as CICD_SNYK_TOKEN.
      Do not paste the actual token into your configuration.
      If omitted it's assumed the CLI has already been setup with a valid token beforehand.
    type: env_var_name
    default: SNYK_TOKEN
  severity-threshold:
    description: Only report vulnerabilities of provided level or higher (low/medium/high/critical). Default is low.
    type: enum
    enum: ["low", "medium", "high", "critical"]
    default: "low"
  fail-on-issues:
    description: This specifies if builds should be failed or continued based on issues found by Snyk.
    type: boolean
    default: true
  monitor-on-build:
    description: Take a current application dependencies snapshot for continuous monitoring by Snyk, if test was succesful.
    type: boolean
    default: true
  target-file:
    description: The path to the manifest file to be used by Snyk. Should be provided if non-standard.
    type: string
    default: ""
  docker-image-name:
    description: The image name, if scanning a container image
    type: string
    default: ""
  organization:
    description: >
      Name of the Snyk organisation name, under which this project should be tested and monitored
      If omitted the default organization will be used.
    type: string
    default: ""
  project:
    description: >
      A custom name for the Snyk project to be created on snyk.io.
      If omitted a default-generated project name will be used.
    type: string
    default: ""
  cli-version:
    description: >
      The version of the Snyk CLI you are using.
    type: string
    default: ""
  additional-arguments:
    description: Refer to the Snyk CLI help page for information on additional arguments.
    type: string
    default: ""
  os:
    description: The CLI OS version to download
    type: enum
    enum: ["linux", "macos", "alpine"]
    default: "linux"
  install-alpine-dependencies:
    description: Install additional dependencies required by the alpine cli
    type: boolean
    default: true
  no-output-timeout:
    description: Elapsed time the command can run without output. The default is 10 minutes.
    type: string
    default: "10m"
steps:
  - run:
      name: Install dependencies
      command: |
        if [[ <<parameters.os>> == "alpine" ]]; then
          apk add --no-cache bash curl jq
        fi
  - run:
      name: Store Snyk CLI version as a temporary checksum file
      environment:
        SNYK_CLI_VERSION: <<parameters.cli-version>>
      command: |
        if [[ -z "${SNYK_CLI_VERSION}" ]]; then
          curl https://static.snyk.io/cli/latest/version > /tmp/.snyk-version
        else
          echo "${SNYK_CLI_VERSION}" >> /tmp/.snyk-version
        fi
  - restore_cache:
      keys:
        - v0-snyk-cli-install-{{ arch }}-<<parameters.os>>-{{ checksum "/tmp/.snyk-version" }}
  # install snyk
  - run:
      name: Download Snyk CLI
      environment:
        SNYK_INTEGRATION_NAME: CIRCLECI_ORB
        SNYK_INTEGRATION_VERSION: REPLACE_ORB_VERSION
      command: |
        if [[ ! -x "/tmp/snyk" ]]; then
          SNYK_CLI_VERSION=$(cat "/tmp/.snyk-version")
          echo "Downloading Snyk CLI version ${SNYK_CLI_VERSION}"
          curl -sO --retry 6 https://static.snyk.io/cli/v${SNYK_CLI_VERSION}/snyk-<<parameters.os>>
          curl -sO --retry 6 https://static.snyk.io/cli/v${SNYK_CLI_VERSION}/snyk-<<parameters.os>>.sha256
          sha256sum -c snyk-<<parameters.os>>.sha256
          sudo mv snyk-<<parameters.os>> /tmp/snyk
          sudo chmod +x /tmp/snyk
        fi
        sudo ln -sf /tmp/snyk /usr/local/bin/snyk
        snyk config set disableSuggestions=true
        <<#parameters.token-variable>>snyk auth $<<parameters.token-variable>><</parameters.token-variable>>
  # snyk test
  - run:
      name: "Run Snyk"
      environment:
        SNYK_INTEGRATION_NAME: CIRCLECI_ORB
        SNYK_INTEGRATION_VERSION: REPLACE_ORB_VERSION
      command: >
        snyk <<parameters.command>>
        <<#parameters.docker-image-name>>--docker <<parameters.docker-image-name>><</parameters.docker-image-name>>
        <<#parameters.severity-threshold>>--severity-threshold=<<parameters.severity-threshold>><</parameters.severity-threshold>>
        <<#parameters.organization>>--org=<<parameters.organization>><</parameters.organization>>
        <<#parameters.target-file>>--file=<<parameters.target-file>><</parameters.target-file>>
        <<parameters.additional-arguments>>
        <<^parameters.fail-on-issues>> || true<</parameters.fail-on-issues>>
      no_output_timeout: "<<parameters.no-output-timeout>>"
  # snyk monitor
  - when:
      condition: <<parameters.monitor-on-build>>
      steps:
        - run:
            name: "Run Snyk monitor for continuous monitoring on snyk.io"
            environment:
              SNYK_INTEGRATION_NAME: CIRCLECI_ORB
              SNYK_INTEGRATION_VERSION: REPLACE_ORB_VERSION
            command: >
              snyk monitor
              <<#parameters.docker-image-name>>--docker <<parameters.docker-image-name>><</parameters.docker-image-name>>
              <<#parameters.project>>--project-name=<<parameters.project>><</parameters.project>>
              <<#parameters.organization>>--org=<<parameters.organization>><</parameters.organization>>
              <<#parameters.target-file>>--file=<<parameters.target-file>><</parameters.target-file>>
              <<parameters.additional-arguments>>
            no_output_timeout: "<<parameters.no-output-timeout>>"

  - save_cache:
      key: v0-snyk-cli-install-{{ arch }}-<<parameters.os>>-{{ checksum "/tmp/.snyk-version" }}
      paths:
        - /tmp/snyk
